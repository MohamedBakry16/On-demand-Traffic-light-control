
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000730  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f8  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000876  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000afd  00000000  00000000  0000263a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d6  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e4  00000000  00000000  00003856  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003f3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1b 02 	call	0x436	; 0x436 <main>
  74:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_start>:
int color=0;

void APP_start(void)
{
	//interrupts setup
	sci() //or set bit 7 in status register
  7c:	78 94       	sei
	MCUCR |=(1<<0) | (1<<1); //chose sensing control
  7e:	85 b7       	in	r24, 0x35	; 53
  80:	83 60       	ori	r24, 0x03	; 3
  82:	85 bf       	out	0x35, r24	; 53
	GICR |=(1<<6);  //enable external interrupt INT0
  84:	8b b7       	in	r24, 0x3b	; 59
  86:	80 64       	ori	r24, 0x40	; 64
  88:	8b bf       	out	0x3b, r24	; 59
	
	
	
	
	//One push button
	BUTTON_init(PORT_D,2);
  8a:	62 e0       	ldi	r22, 0x02	; 2
  8c:	84 e4       	ldi	r24, 0x44	; 68
  8e:	0e 94 ab 01 	call	0x356	; 0x356 <BUTTON_init>
	
	
	//Three LEDs for cars - Green, Yellow, and Red
	LED_init(PORT_A,0); //green
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 af 01 	call	0x35e	; 0x35e <LED_init>
	LED_init(PORT_A,1); //yellow
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 af 01 	call	0x35e	; 0x35e <LED_init>
	LED_init(PORT_A,2); //red
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 af 01 	call	0x35e	; 0x35e <LED_init>
	
	
	//Three LEDs for pedestrians - Green, Yellow, and Red
	LED_init(PORT_B,0); //green
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 af 01 	call	0x35e	; 0x35e <LED_init>
	LED_init(PORT_B,1); //yellow
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 af 01 	call	0x35e	; 0x35e <LED_init>
	LED_init(PORT_B,2); //red
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 af 01 	call	0x35e	; 0x35e <LED_init>
	while(1)
	{
		
		
		//normal mode
		LED_on(PORT_A,0); //green
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	81 e4       	ldi	r24, 0x41	; 65
  c6:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		LED_on(PORT_B,2); //red
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	82 e4       	ldi	r24, 0x42	; 66
  ce:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		color=0;
  d2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		TIMER_5_sec_delay();
  da:	0e 94 25 03 	call	0x64a	; 0x64a <TIMER_5_sec_delay>
		LED_off(PORT_A,0);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		LED_off(PORT_B,2); //red
  e6:	62 e0       	ldi	r22, 0x02	; 2
  e8:	82 e4       	ldi	r24, 0x42	; 66
  ea:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		
		
		LED_on(PORT_B,2);
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	82 e4       	ldi	r24, 0x42	; 66
  f2:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		LED_blink(PORT_A,1); //yellow
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	81 e4       	ldi	r24, 0x41	; 65
  fa:	0e 94 bb 01 	call	0x376	; 0x376 <LED_blink>
		color=1;
  fe:	c1 e0       	ldi	r28, 0x01	; 1
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <_edata+0x1>
 106:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <_edata>
		LED_off(PORT_A,1);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	81 e4       	ldi	r24, 0x41	; 65
 10e:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		LED_off(PORT_B,2);
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	82 e4       	ldi	r24, 0x42	; 66
 116:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		
		
		LED_on(PORT_A,2);//red
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		LED_on(PORT_B,0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	82 e4       	ldi	r24, 0x42	; 66
 126:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		color=2;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 132:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		TIMER_5_sec_delay();
 136:	0e 94 25 03 	call	0x64a	; 0x64a <TIMER_5_sec_delay>
		LED_off(PORT_A,2);
 13a:	62 e0       	ldi	r22, 0x02	; 2
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		LED_off(PORT_B,0);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	82 e4       	ldi	r24, 0x42	; 66
 146:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		
		
		
		LED_on(PORT_B,2);
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	82 e4       	ldi	r24, 0x42	; 66
 14e:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		LED_blink(PORT_A,1); //yellow
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 bb 01 	call	0x376	; 0x376 <LED_blink>
		color=1;
 15a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <_edata+0x1>
 15e:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <_edata>
		LED_off(PORT_A,1);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		LED_off(PORT_B,2);
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	82 e4       	ldi	r24, 0x42	; 66
 16e:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
 172:	a7 cf       	rjmp	.-178    	; 0xc2 <APP_start+0x46>

00000174 <__vector_1>:
}



ISR(EXT_INT_0)
 {
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	 switch(color)
 196:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 19a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	91 05       	cpc	r25, r1
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <__vector_1+0x32>
 1a4:	5c c0       	rjmp	.+184    	; 0x25e <__vector_1+0xea>
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	91 05       	cpc	r25, r1
 1aa:	09 f4       	brne	.+2      	; 0x1ae <__vector_1+0x3a>
 1ac:	a9 c0       	rjmp	.+338    	; 0x300 <__vector_1+0x18c>
 1ae:	89 2b       	or	r24, r25
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <__vector_1+0x40>
 1b2:	c0 c0       	rjmp	.+384    	; 0x334 <__vector_1+0x1c0>
	 {
		 case green:
		 LED_off(PORT_A,0); //green
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	81 e4       	ldi	r24, 0x41	; 65
 1b8:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_on(PORT_B,2); //pedestrian's Red
 1bc:	62 e0       	ldi	r22, 0x02	; 2
 1be:	82 e4       	ldi	r24, 0x42	; 66
 1c0:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 LED_blink_2_leds(PORT_A,1,PORT_B,1); //car's, pedestrian's yellow
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	42 e4       	ldi	r20, 0x42	; 66
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	81 e4       	ldi	r24, 0x41	; 65
 1cc:	0e 94 de 01 	call	0x3bc	; 0x3bc <LED_blink_2_leds>
		 LED_off(PORT_B,2); //pedestrian's Red
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	82 e4       	ldi	r24, 0x42	; 66
 1d4:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_off(PORT_A,1); //car's yellow
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	81 e4       	ldi	r24, 0x41	; 65
 1dc:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_off(PORT_B,1); //pedestrian's yellow
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 ///////////////////////////////////////////////////////
		 LED_on(PORT_A,2); // cars' Red
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	81 e4       	ldi	r24, 0x41	; 65
 1ec:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 LED_on(PORT_B,0); //pedestrian's Green
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	82 e4       	ldi	r24, 0x42	; 66
 1f4:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 TIMER_5_sec_delay();
 1f8:	0e 94 25 03 	call	0x64a	; 0x64a <TIMER_5_sec_delay>
		 LED_off(PORT_A,2); // cars' Red
 1fc:	62 e0       	ldi	r22, 0x02	; 2
 1fe:	81 e4       	ldi	r24, 0x41	; 65
 200:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 //////////////////////////////////////////////////////
		 LED_blink_2_leds(PORT_A,1,PORT_B,1); //car's, pedestrian's yellow
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	42 e4       	ldi	r20, 0x42	; 66
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	81 e4       	ldi	r24, 0x41	; 65
 20c:	0e 94 de 01 	call	0x3bc	; 0x3bc <LED_blink_2_leds>
		 LED_off(PORT_A,1); //car's yellow
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	81 e4       	ldi	r24, 0x41	; 65
 214:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_off(PORT_B,1); //pedestrian's yellow
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	82 e4       	ldi	r24, 0x42	; 66
 21c:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 ////////////////////////////////////////////////////
		 LED_off(PORT_B,0); //pedestrian's Green
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	82 e4       	ldi	r24, 0x42	; 66
 224:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_on(PORT_B,2); //pedestrian's Red
 228:	62 e0       	ldi	r22, 0x02	; 2
 22a:	82 e4       	ldi	r24, 0x42	; 66
 22c:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 LED_on(PORT_A,0); // cars' green
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	81 e4       	ldi	r24, 0x41	; 65
 234:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 TIMER_1_sec_delay();
 238:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
		 LED_off(PORT_B,2); //pedestrian's Red
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	82 e4       	ldi	r24, 0x42	; 66
 240:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_off(PORT_A,0); // cars' green
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	81 e4       	ldi	r24, 0x41	; 65
 248:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 TIMER_start(); //to start timer again 
 24c:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_start>
		 overflow_counter=20; //to prevent delay when return to normal mode
 250:	84 e1       	ldi	r24, 0x14	; 20
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <overflow_counter+0x1>
 258:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <overflow_counter>
		 break;
 25c:	6b c0       	rjmp	.+214    	; 0x334 <__vector_1+0x1c0>
		 
		 
		 case yellow:
		 LED_off(PORT_A,1); //yellow
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	81 e4       	ldi	r24, 0x41	; 65
 262:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_off(PORT_A,0); //green
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	81 e4       	ldi	r24, 0x41	; 65
 26a:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_on(PORT_B,2); //pedestrian's Red
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	82 e4       	ldi	r24, 0x42	; 66
 272:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 LED_blink_2_leds(PORT_A,1,PORT_B,1); //car's, pedestrian's yellow
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	42 e4       	ldi	r20, 0x42	; 66
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	81 e4       	ldi	r24, 0x41	; 65
 27e:	0e 94 de 01 	call	0x3bc	; 0x3bc <LED_blink_2_leds>
		 LED_off(PORT_B,2); //pedestrian's Red
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	82 e4       	ldi	r24, 0x42	; 66
 286:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_off(PORT_A,1); //car's yellow
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	81 e4       	ldi	r24, 0x41	; 65
 28e:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_off(PORT_B,1); //pedestrian's yellow
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	82 e4       	ldi	r24, 0x42	; 66
 296:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 ///////////////////////////////////////////////////////
		 LED_on(PORT_A,2); // cars' Red
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	81 e4       	ldi	r24, 0x41	; 65
 29e:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 LED_on(PORT_B,0); //pedestrian's Green
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	82 e4       	ldi	r24, 0x42	; 66
 2a6:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 TIMER_5_sec_delay();
 2aa:	0e 94 25 03 	call	0x64a	; 0x64a <TIMER_5_sec_delay>
		 LED_off(PORT_A,2); // cars' Red
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	81 e4       	ldi	r24, 0x41	; 65
 2b2:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 //////////////////////////////////////////////////////
		 LED_blink_2_leds(PORT_A,1,PORT_B,1); //car's, pedestrian's yellow
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	42 e4       	ldi	r20, 0x42	; 66
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	81 e4       	ldi	r24, 0x41	; 65
 2be:	0e 94 de 01 	call	0x3bc	; 0x3bc <LED_blink_2_leds>
		 LED_off(PORT_A,1); //car's yellow
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	81 e4       	ldi	r24, 0x41	; 65
 2c6:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_off(PORT_B,1); //pedestrian's yellow
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	82 e4       	ldi	r24, 0x42	; 66
 2ce:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 ////////////////////////////////////////////////////
		 LED_off(PORT_B,0); //pedestrian's Green
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	82 e4       	ldi	r24, 0x42	; 66
 2d6:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_on(PORT_B,2); //pedestrian's Red
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	82 e4       	ldi	r24, 0x42	; 66
 2de:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 LED_on(PORT_A,0); // cars' green
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	81 e4       	ldi	r24, 0x41	; 65
 2e6:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 TIMER_1_sec_delay();
 2ea:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
		 TIMER_start();
 2ee:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_start>
	     overflow_counter=20; //to prevent delay when return to normal mode
 2f2:	84 e1       	ldi	r24, 0x14	; 20
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <overflow_counter+0x1>
 2fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <overflow_counter>
		 break;
 2fe:	1a c0       	rjmp	.+52     	; 0x334 <__vector_1+0x1c0>
		 
		 
		 case red:
		 LED_on(PORT_B,0); //pedestrian's Green
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	82 e4       	ldi	r24, 0x42	; 66
 304:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 LED_on(PORT_A,2); // cars' Red
 308:	62 e0       	ldi	r22, 0x02	; 2
 30a:	81 e4       	ldi	r24, 0x41	; 65
 30c:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
		 TIMER_5_sec_delay();
 310:	0e 94 25 03 	call	0x64a	; 0x64a <TIMER_5_sec_delay>
		 LED_off(PORT_B,0); //pedestrian's Green
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	82 e4       	ldi	r24, 0x42	; 66
 318:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 LED_off(PORT_A,2); // cars' Red
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	81 e4       	ldi	r24, 0x41	; 65
 320:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
		 TIMER_start();
 324:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_start>
		 overflow_counter=20; //to prevent delay when return to normal mode
 328:	84 e1       	ldi	r24, 0x14	; 20
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <overflow_counter+0x1>
 330:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <overflow_counter>
		 break;
	   
		  
	  }
 	
 }
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <BUTTON_init>:
#include "button.h"

void BUTTON_init(uint8_t ButtonPort,uint8_t ButtonPin) //input device
{
	DIO_int(ButtonPort,ButtonPin,IN);
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	0e 94 20 02 	call	0x440	; 0x440 <DIO_int>
 35c:	08 95       	ret

0000035e <LED_init>:
	}
	else if (value==1)
	{
		LED_off(LedPort,LedPin);
	}
}
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	0e 94 20 02 	call	0x440	; 0x440 <DIO_int>
 364:	08 95       	ret

00000366 <LED_on>:
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_write>
 36c:	08 95       	ret

0000036e <LED_off>:
 36e:	40 e0       	ldi	r20, 0x00	; 0
 370:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_write>
 374:	08 95       	ret

00000376 <LED_blink>:




void LED_blink(uint8_t LedPort,uint8_t LedPin) //led blink
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	c8 2f       	mov	r28, r24
 37c:	d6 2f       	mov	r29, r22
	LED_on(LedPort,LedPin);
 37e:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
	TIMER_1_sec_delay();
 382:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
	LED_off(LedPort,LedPin);
 386:	6d 2f       	mov	r22, r29
 388:	8c 2f       	mov	r24, r28
 38a:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
	TIMER_1_sec_delay();
 38e:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
	LED_on(LedPort,LedPin);
 392:	6d 2f       	mov	r22, r29
 394:	8c 2f       	mov	r24, r28
 396:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
	TIMER_1_sec_delay();
 39a:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
	LED_off(LedPort,LedPin);
 39e:	6d 2f       	mov	r22, r29
 3a0:	8c 2f       	mov	r24, r28
 3a2:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
	TIMER_1_sec_delay();
 3a6:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
	LED_on(LedPort,LedPin);
 3aa:	6d 2f       	mov	r22, r29
 3ac:	8c 2f       	mov	r24, r28
 3ae:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
	TIMER_1_sec_delay();
 3b2:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
	
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <LED_blink_2_leds>:


void LED_blink_2_leds(uint8_t LedPort1,uint8_t LedPin1,uint8_t LedPort2,uint8_t LedPin2) //2 leds blink
{
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	18 2f       	mov	r17, r24
 3c6:	06 2f       	mov	r16, r22
 3c8:	c4 2f       	mov	r28, r20
 3ca:	d2 2f       	mov	r29, r18
	LED_on(LedPort1,LedPin1);
 3cc:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
	LED_on(LedPort2,LedPin2);
 3d0:	6d 2f       	mov	r22, r29
 3d2:	8c 2f       	mov	r24, r28
 3d4:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
	TIMER_1_sec_delay();
 3d8:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
	LED_off(LedPort1,LedPin1);
 3dc:	60 2f       	mov	r22, r16
 3de:	81 2f       	mov	r24, r17
 3e0:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
	LED_off(LedPort2,LedPin2);
 3e4:	6d 2f       	mov	r22, r29
 3e6:	8c 2f       	mov	r24, r28
 3e8:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
	TIMER_1_sec_delay();
 3ec:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
	LED_on(LedPort1,LedPin1);
 3f0:	60 2f       	mov	r22, r16
 3f2:	81 2f       	mov	r24, r17
 3f4:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
	LED_on(LedPort2,LedPin2);
 3f8:	6d 2f       	mov	r22, r29
 3fa:	8c 2f       	mov	r24, r28
 3fc:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
	TIMER_1_sec_delay();
 400:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
	LED_off(LedPort1,LedPin1);
 404:	60 2f       	mov	r22, r16
 406:	81 2f       	mov	r24, r17
 408:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
	LED_off(LedPort2,LedPin2);
 40c:	6d 2f       	mov	r22, r29
 40e:	8c 2f       	mov	r24, r28
 410:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_off>
	TIMER_1_sec_delay();
 414:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
	LED_on(LedPort1,LedPin1);
 418:	60 2f       	mov	r22, r16
 41a:	81 2f       	mov	r24, r17
 41c:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
	LED_on(LedPort2,LedPin2);
 420:	6d 2f       	mov	r22, r29
 422:	8c 2f       	mov	r24, r28
 424:	0e 94 b3 01 	call	0x366	; 0x366 <LED_on>
	TIMER_1_sec_delay();
 428:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER_1_sec_delay>
	
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	08 95       	ret

00000436 <main>:


int main(void)
{
    
    APP_start();
 436:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_start>
}
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	08 95       	ret

00000440 <DIO_int>:
#include "dio.h"

void DIO_int(uint8_t PortNumber,uint8_t PinNumber,uint8_t direction)
{
	switch(PortNumber)
 440:	82 34       	cpi	r24, 0x42	; 66
 442:	31 f1       	breq	.+76     	; 0x490 <DIO_int+0x50>
 444:	18 f4       	brcc	.+6      	; 0x44c <DIO_int+0xc>
 446:	81 34       	cpi	r24, 0x41	; 65
 448:	39 f0       	breq	.+14     	; 0x458 <DIO_int+0x18>
 44a:	08 95       	ret
 44c:	83 34       	cpi	r24, 0x43	; 67
 44e:	e1 f1       	breq	.+120    	; 0x4c8 <DIO_int+0x88>
 450:	84 34       	cpi	r24, 0x44	; 68
 452:	09 f4       	brne	.+2      	; 0x456 <DIO_int+0x16>
 454:	54 c0       	rjmp	.+168    	; 0x4fe <DIO_int+0xbe>
 456:	08 95       	ret
	{
		
		case PORT_A:
		if(direction==IN)
 458:	41 11       	cpse	r20, r1
 45a:	0c c0       	rjmp	.+24     	; 0x474 <DIO_int+0x34>
		{
			DDRA &= ~(1<<PinNumber);  //input
 45c:	2a b3       	in	r18, 0x1a	; 26
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_int+0x28>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_int+0x24>
 46c:	80 95       	com	r24
 46e:	82 23       	and	r24, r18
 470:	8a bb       	out	0x1a, r24	; 26
 472:	08 95       	ret
		}
		else if (direction==OUT)
 474:	41 30       	cpi	r20, 0x01	; 1
 476:	09 f0       	breq	.+2      	; 0x47a <DIO_int+0x3a>
 478:	5c c0       	rjmp	.+184    	; 0x532 <DIO_int+0xf2>
		{
			DDRA |=(1<<PinNumber);    //output
 47a:	2a b3       	in	r18, 0x1a	; 26
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_int+0x46>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_int+0x42>
 48a:	82 2b       	or	r24, r18
 48c:	8a bb       	out	0x1a, r24	; 26
 48e:	08 95       	ret
		break;
		
		
		
		case PORT_B:
		if(direction==IN)
 490:	41 11       	cpse	r20, r1
 492:	0c c0       	rjmp	.+24     	; 0x4ac <DIO_int+0x6c>
		{
			DDRB &= ~(1<<PinNumber);
 494:	27 b3       	in	r18, 0x17	; 23
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_int+0x60>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	6a 95       	dec	r22
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_int+0x5c>
 4a4:	80 95       	com	r24
 4a6:	82 23       	and	r24, r18
 4a8:	87 bb       	out	0x17, r24	; 23
 4aa:	08 95       	ret
		}
		else if (direction==OUT)
 4ac:	41 30       	cpi	r20, 0x01	; 1
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <DIO_int+0x72>
 4b0:	40 c0       	rjmp	.+128    	; 0x532 <DIO_int+0xf2>
		{
			DDRB |=(1<<PinNumber);
 4b2:	27 b3       	in	r18, 0x17	; 23
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_int+0x7e>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	6a 95       	dec	r22
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_int+0x7a>
 4c2:	82 2b       	or	r24, r18
 4c4:	87 bb       	out	0x17, r24	; 23
 4c6:	08 95       	ret
		}
		break;
		
		
		case PORT_C:
		if(direction==IN)
 4c8:	41 11       	cpse	r20, r1
 4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <DIO_int+0xa4>
		{
			DDRC &= ~(1<<PinNumber);
 4cc:	24 b3       	in	r18, 0x14	; 20
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_int+0x98>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	6a 95       	dec	r22
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_int+0x94>
 4dc:	80 95       	com	r24
 4de:	82 23       	and	r24, r18
 4e0:	84 bb       	out	0x14, r24	; 20
 4e2:	08 95       	ret
		}
		else if (direction==OUT)
 4e4:	41 30       	cpi	r20, 0x01	; 1
 4e6:	29 f5       	brne	.+74     	; 0x532 <DIO_int+0xf2>
		{
			DDRC |=(1<<PinNumber);
 4e8:	24 b3       	in	r18, 0x14	; 20
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_int+0xb4>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_int+0xb0>
 4f8:	82 2b       	or	r24, r18
 4fa:	84 bb       	out	0x14, r24	; 20
 4fc:	08 95       	ret
		break;
		
		
		
		case PORT_D:
		if(direction==IN)
 4fe:	41 11       	cpse	r20, r1
 500:	0c c0       	rjmp	.+24     	; 0x51a <DIO_int+0xda>
		{
			DDRD &= ~(1<<PinNumber);
 502:	21 b3       	in	r18, 0x11	; 17
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_int+0xce>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	6a 95       	dec	r22
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_int+0xca>
 512:	80 95       	com	r24
 514:	82 23       	and	r24, r18
 516:	81 bb       	out	0x11, r24	; 17
 518:	08 95       	ret
		}
		else if (direction==OUT)
 51a:	41 30       	cpi	r20, 0x01	; 1
 51c:	51 f4       	brne	.+20     	; 0x532 <DIO_int+0xf2>
		{
			DDRD |=(1<<PinNumber);
 51e:	21 b3       	in	r18, 0x11	; 17
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_int+0xea>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_int+0xe6>
 52e:	82 2b       	or	r24, r18
 530:	81 bb       	out	0x11, r24	; 17
 532:	08 95       	ret

00000534 <DIO_write>:



void DIO_write(uint8_t PortNumber,uint8_t PinNumber,uint8_t value)
{
	switch(PortNumber)
 534:	82 34       	cpi	r24, 0x42	; 66
 536:	31 f1       	breq	.+76     	; 0x584 <DIO_write+0x50>
 538:	18 f4       	brcc	.+6      	; 0x540 <DIO_write+0xc>
 53a:	81 34       	cpi	r24, 0x41	; 65
 53c:	39 f0       	breq	.+14     	; 0x54c <DIO_write+0x18>
 53e:	08 95       	ret
 540:	83 34       	cpi	r24, 0x43	; 67
 542:	e1 f1       	breq	.+120    	; 0x5bc <DIO_write+0x88>
 544:	84 34       	cpi	r24, 0x44	; 68
 546:	09 f4       	brne	.+2      	; 0x54a <DIO_write+0x16>
 548:	54 c0       	rjmp	.+168    	; 0x5f2 <DIO_write+0xbe>
 54a:	08 95       	ret
	{
		
		case PORT_A:
		if(value==LOW)
 54c:	41 11       	cpse	r20, r1
 54e:	0c c0       	rjmp	.+24     	; 0x568 <DIO_write+0x34>
		{
			PORTA &= ~(1<<PinNumber);  //write 0
 550:	2b b3       	in	r18, 0x1b	; 27
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_write+0x28>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_write+0x24>
 560:	80 95       	com	r24
 562:	82 23       	and	r24, r18
 564:	8b bb       	out	0x1b, r24	; 27
 566:	08 95       	ret
		}
		else if (value==HIGH)
 568:	41 30       	cpi	r20, 0x01	; 1
 56a:	09 f0       	breq	.+2      	; 0x56e <DIO_write+0x3a>
 56c:	5c c0       	rjmp	.+184    	; 0x626 <DIO_write+0xf2>
		{
			PORTA |=(1<<PinNumber);   //write 1
 56e:	2b b3       	in	r18, 0x1b	; 27
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_write+0x46>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_write+0x42>
 57e:	82 2b       	or	r24, r18
 580:	8b bb       	out	0x1b, r24	; 27
 582:	08 95       	ret
		
		
		
		
		case PORT_B:
		if(value==LOW)
 584:	41 11       	cpse	r20, r1
 586:	0c c0       	rjmp	.+24     	; 0x5a0 <DIO_write+0x6c>
		{
			PORTB &= ~(1<<PinNumber);  //write 0
 588:	28 b3       	in	r18, 0x18	; 24
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_write+0x60>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_write+0x5c>
 598:	80 95       	com	r24
 59a:	82 23       	and	r24, r18
 59c:	88 bb       	out	0x18, r24	; 24
 59e:	08 95       	ret
		}
		else if (value==HIGH)
 5a0:	41 30       	cpi	r20, 0x01	; 1
 5a2:	09 f0       	breq	.+2      	; 0x5a6 <DIO_write+0x72>
 5a4:	40 c0       	rjmp	.+128    	; 0x626 <DIO_write+0xf2>
		{
			PORTB |=(1<<PinNumber);    //write 1
 5a6:	28 b3       	in	r18, 0x18	; 24
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_write+0x7e>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_write+0x7a>
 5b6:	82 2b       	or	r24, r18
 5b8:	88 bb       	out	0x18, r24	; 24
 5ba:	08 95       	ret
		break;
		
		
		
		case PORT_C:
		if(value==LOW)
 5bc:	41 11       	cpse	r20, r1
 5be:	0c c0       	rjmp	.+24     	; 0x5d8 <DIO_write+0xa4>
		{
			PORTC &= ~(1<<PinNumber);  //write 0
 5c0:	25 b3       	in	r18, 0x15	; 21
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_write+0x98>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_write+0x94>
 5d0:	80 95       	com	r24
 5d2:	82 23       	and	r24, r18
 5d4:	85 bb       	out	0x15, r24	; 21
 5d6:	08 95       	ret
		}
		else if (value==HIGH)
 5d8:	41 30       	cpi	r20, 0x01	; 1
 5da:	29 f5       	brne	.+74     	; 0x626 <DIO_write+0xf2>
		{
			PORTC |=(1<<PinNumber);    //write 1
 5dc:	25 b3       	in	r18, 0x15	; 21
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_write+0xb4>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_write+0xb0>
 5ec:	82 2b       	or	r24, r18
 5ee:	85 bb       	out	0x15, r24	; 21
 5f0:	08 95       	ret
		break;
		
		
		
		case PORT_D:
		if(value==LOW)
 5f2:	41 11       	cpse	r20, r1
 5f4:	0c c0       	rjmp	.+24     	; 0x60e <DIO_write+0xda>
		{
			PORTD &= ~(1<<PinNumber);  //write 0
 5f6:	22 b3       	in	r18, 0x12	; 18
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_write+0xce>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	6a 95       	dec	r22
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_write+0xca>
 606:	80 95       	com	r24
 608:	82 23       	and	r24, r18
 60a:	82 bb       	out	0x12, r24	; 18
 60c:	08 95       	ret
		}
		else if (value==HIGH)
 60e:	41 30       	cpi	r20, 0x01	; 1
 610:	51 f4       	brne	.+20     	; 0x626 <DIO_write+0xf2>
		{
			PORTD |=(1<<PinNumber);    //write 1
 612:	22 b3       	in	r18, 0x12	; 18
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_write+0xea>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_write+0xe6>
 622:	82 2b       	or	r24, r18
 624:	82 bb       	out	0x12, r24	; 18
 626:	08 95       	ret

00000628 <TIMER_init>:
#include "timer.h"

void TIMER_init(void)
{
	TCCR0 =0x00; //select normal mode
 628:	13 be       	out	0x33, r1	; 51
	TCNT0 =12;  //set timer initial value
 62a:	8c e0       	ldi	r24, 0x0C	; 12
 62c:	82 bf       	out	0x32, r24	; 50
 62e:	08 95       	ret

00000630 <TIMER_start>:


void TIMER_start(void) //put prescaler, 1024 prescaler
{
	
	TCCR0 |=(1<<0);
 630:	83 b7       	in	r24, 0x33	; 51
 632:	81 60       	ori	r24, 0x01	; 1
 634:	83 bf       	out	0x33, r24	; 51
	TCCR0 |=(1<<2);
 636:	83 b7       	in	r24, 0x33	; 51
 638:	84 60       	ori	r24, 0x04	; 4
 63a:	83 bf       	out	0x33, r24	; 51
 63c:	08 95       	ret

0000063e <TIMER_stop>:



void TIMER_stop(void)
{
	TCCR0 =0x00;
 63e:	13 be       	out	0x33, r1	; 51
 640:	08 95       	ret

00000642 <TIMER_clearoverflowflag>:



void TIMER_clearoverflowflag(void)
{
	TIFR |=(1<<0);
 642:	88 b7       	in	r24, 0x38	; 56
 644:	81 60       	ori	r24, 0x01	; 1
 646:	88 bf       	out	0x38, r24	; 56
 648:	08 95       	ret

0000064a <TIMER_5_sec_delay>:


void TIMER_5_sec_delay(void)
{	
	int number_of_overflow = 20;
	overflow_counter=0;
 64a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflow_counter+0x1>
 64e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflow_counter>
	TIMER_init();
 652:	0e 94 14 03 	call	0x628	; 0x628 <TIMER_init>
	TIMER_start();
 656:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_start>
	while(overflow_counter<number_of_overflow)
 65a:	0e c0       	rjmp	.+28     	; 0x678 <TIMER_5_sec_delay+0x2e>
	{
		while ((TIFR &(1<<0))==0);
 65c:	08 b6       	in	r0, 0x38	; 56
 65e:	00 fe       	sbrs	r0, 0
 660:	fd cf       	rjmp	.-6      	; 0x65c <TIMER_5_sec_delay+0x12>
		TIMER_clearoverflowflag();
 662:	0e 94 21 03 	call	0x642	; 0x642 <TIMER_clearoverflowflag>
		overflow_counter++;
 666:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflow_counter>
 66a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <overflow_counter+0x1>
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <overflow_counter+0x1>
 674:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <overflow_counter>
{	
	int number_of_overflow = 20;
	overflow_counter=0;
	TIMER_init();
	TIMER_start();
	while(overflow_counter<number_of_overflow)
 678:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflow_counter>
 67c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <overflow_counter+0x1>
 680:	44 97       	sbiw	r24, 0x14	; 20
 682:	64 f3       	brlt	.-40     	; 0x65c <TIMER_5_sec_delay+0x12>
	{
		while ((TIFR &(1<<0))==0);
		TIMER_clearoverflowflag();
		overflow_counter++;
	}
	TIMER_stop();
 684:	0e 94 1f 03 	call	0x63e	; 0x63e <TIMER_stop>
 688:	08 95       	ret

0000068a <TIMER_1_sec_delay>:




void TIMER_1_sec_delay(void)
{
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
	int number_of_overflow = 4;
	int overflow_counter=0;
	TIMER_init();
 68e:	0e 94 14 03 	call	0x628	; 0x628 <TIMER_init>
	TIMER_start();
 692:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_start>


void TIMER_1_sec_delay(void)
{
	int number_of_overflow = 4;
	int overflow_counter=0;
 696:	c0 e0       	ldi	r28, 0x00	; 0
 698:	d0 e0       	ldi	r29, 0x00	; 0
	TIMER_init();
	TIMER_start();
	while(overflow_counter<number_of_overflow)
 69a:	06 c0       	rjmp	.+12     	; 0x6a8 <TIMER_1_sec_delay+0x1e>
	{
		while ((TIFR &(1<<0))==0);
 69c:	08 b6       	in	r0, 0x38	; 56
 69e:	00 fe       	sbrs	r0, 0
 6a0:	fd cf       	rjmp	.-6      	; 0x69c <TIMER_1_sec_delay+0x12>
		TIMER_clearoverflowflag();
 6a2:	0e 94 21 03 	call	0x642	; 0x642 <TIMER_clearoverflowflag>
		overflow_counter++;
 6a6:	21 96       	adiw	r28, 0x01	; 1
{
	int number_of_overflow = 4;
	int overflow_counter=0;
	TIMER_init();
	TIMER_start();
	while(overflow_counter<number_of_overflow)
 6a8:	c4 30       	cpi	r28, 0x04	; 4
 6aa:	d1 05       	cpc	r29, r1
 6ac:	bc f3       	brlt	.-18     	; 0x69c <TIMER_1_sec_delay+0x12>
	{
		while ((TIFR &(1<<0))==0);
		TIMER_clearoverflowflag();
		overflow_counter++;
	}
	TIMER_stop();	
 6ae:	0e 94 1f 03 	call	0x63e	; 0x63e <TIMER_stop>
}
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret

000006b8 <_exit>:
 6b8:	f8 94       	cli

000006ba <__stop_program>:
 6ba:	ff cf       	rjmp	.-2      	; 0x6ba <__stop_program>
